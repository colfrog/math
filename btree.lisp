(in-package :clf-math)

(defun make-tree (value &optional (node1 nil) (node2 nil))
  (cons
   value
   (cons node1 node2)))

(defun insert-tree (tree value)
  (if tree
      (if (<= value (car tree))
	  (make-tree (car tree)
		     (insert-tree (cadr tree) value)
		     (cddr tree))
	  (make-tree (car tree)
		     (cadr tree)
		     (insert-tree (cddr tree) value)))
      (make-tree value)))

(defun build-tree (l &optional (tree nil))
  (if (car l)
      (build-tree (cdr l) (insert-tree tree (car l)))
      tree))

(defun height-tree (tree)
  (cond
    ((null tree) 0)
    ((and (null (cadr tree)) (null (cddr tree)))
     1)
    (t (1+ (max (height-tree (cadr tree)) (height-tree (cddr tree)))))))

(defun insert-avl-tree (tree value)
  (labels ((balance-tree (tree &optional (hb 1))
	   (labels ((zigzig-right (tree)
		      (let ((old-root tree)
			    (new-root (cddr tree)))
			(setf (cddr old-root) (cadr new-root))
			(setf (cadr new-root) old-root)
			new-root))
		    (zigzig-left (tree)
		      (let* ((old-root tree)
			     (new-root (cadr tree)))
			(setf (cadr old-root) (cddr new-root))
			(setf (cddr new-root) old-root)
			new-root))
		    (zigzag-right (tree)
		      (zigzig-right (zigzig-left (cddr tree))))
		    (zigzag-left (tree)
		      (zigzig-left (zigzig-right (cadr tree))))
		    (height-diff (tree) (print (- (height-tree (cadr tree))
						  (height-tree (cddr tree))))))
	     (let ((diff (height-diff tree)))
	       (cond
		 ((> diff hb)
		  (let ((diff (height-diff (cadr tree))))
		    (if (< diff 0)
			(zigzag-left tree)
			(zigzig-left tree))))
		 ((< diff (- hb))
		  (let ((diff (height-diff (cddr tree))))
		    (if (> diff 0)
			(zigzag-right tree)
			(zigzig-right tree))))
		 (t tree))))))
    (if tree
	(let ((tree
	       (if (<= value (car tree))
		   (make-tree (car tree)
			      (insert-avl-tree (cadr tree) value)
			      (cddr tree))
		   (make-tree (car tree)
			      (cadr tree)
			      (insert-avl-tree (cddr tree) value)))))
	  (balance-tree tree))
	(make-tree value))))

(defun build-avl-tree (l &optional (tree nil))
  (if (car l)
      (build-avl-tree (cdr l) (insert-avl-tree tree (car l)))
      tree))
