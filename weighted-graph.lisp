(in-package :clf-math)

(defclass weighted-graph ()
  ((data :initform nil :initarg :data)))

(defmethod add-node-w ((g weighted-graph) &key dest-nodes src-nodes)
  (with-slots (data) g
    (let* ((size (1+ (car (array-dimensions data))))
	   (new-matrix (make-array (list size size) :initial-element nil)))
      (dotimes (i (1- size))
	(dotimes (j (1- size))
	  (setf (aref new-matrix i j) (aref data i j))))
      (setf (aref new-matrix (1- size) (1- size)) 0)
      (dolist (node dest-nodes)
	(setf (aref new-matrix (1- size) (car node)) (cdr node)))
      (dolist (node src-nodes)
	(setf (aref new-matrix (car node) (1- size)) (cdr node))))))

(defmethod add-arc-w ((g weighted-graph) (src-node number) (dest-node number) (weight number))
  (with-slots (data) g
    (setf (aref data src-node dest-node) weight)))

(defun index-of-min (arr)
  (let ((minval nil)
	(min-index nil))
    (dotimes (i (length arr))
      (let ((val (aref arr i)))
	(when (not (null val))
	  (when (or (null minval) (< val minval))
	    (setf minval val)
	    (setf min-index i)))))
    min-index))

(defun and-array (arr)
  (let ((res t))
    (dotimes (i (length arr))
      (setf res (and res (aref arr i))))
    res))

(defun mask-array (mask arr)
  (let ((new-array (make-array (length arr) :initial-element nil)))
    (dotimes (i (length arr))
      (when (aref mask i)
	(setf (aref new-array i) (aref arr i))))
    new-array))

(defmethod dijkstra ((g weighted-graph) (start-node number))
  (with-slots (data) g
    (let* ((size (car (array-dimensions data)))
	   (distance (make-array size :initial-element nil))
	   (predecessor (make-array size :initial-element nil))
	   (done (make-array size :initial-element nil))
	   (not-done (make-array size :initial-element t)))
      (setf (aref distance start-node) 0)
      (do ((node start-node (index-of-min (mask-array not-done distance))))
	  ((and-array done) nil)
	(setf (aref done node) t)
	(setf (aref not-done node) nil)
	(dotimes (u size)
	  (let ((weight (aref data node u)))
	    (when (and (aref not-done u) (not (null weight)))
	      (let ((d (+ (aref distance node) weight)))
		(setf (aref distance u) d)
		(setf (aref predecessor u) node))))))
      (cons distance predecessor))))

(defmethod print-object ((g weighted-graph) stream)
  (print (slot-value g 'data) stream))
